@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Components.Assets
@using ToDoList.Domain.Types
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h1 class="header">TO-DO LIST</h1>
<br>
<div class="container">
    <button class="btn btn-success" @onclick="AddNewItem">
        <AddIcon Width=0.8rem; /> Add new task
    </button>
</div>
<br>

@if (displaiedListOfItems is null)
{
    <p>Loading...</p>
}
@if (displaiedListOfItems != null)
{
    <table class="table table-hover">
        <thead class="table-dark" style="text-align: center;">
            <tr>
                <th style="width: 15%; ">PRIORITY
                    <SortIcon Width="15px" Tooltip="Sort by task priority" OnClick="SortByPriority" />
                </th>
                <th style="width: 10%; ">CATEGORY
                    <SortIcon Width="15px" Tooltip="Sort by task category" OnClick="SortByCategory" />
                </th>
                <th>
                    YOUR TASKS
                    <SortIcon Width="15px" Tooltip="Sort by task name" OnClick="SortByName" />
                </th>
                <th style="width: 20%;">IS COMPLETED
                    <SortIcon Width="15px" Tooltip="Sort by done" OnClick="SortByDone" />
                </th>
                <th style="width: 10%;">ACTIONS</th>
            </tr>
        </thead>
        <tbody class="table-active" style="text-align: center;">
            @foreach (var toDoItem in displaiedListOfItems)
            {
                <tr class="@(toDoItem.IsCompleted ? "table-success" : "table-warning")">
                    <td>@PriorityBadges(toDoItem.TaskPriority)</td>
                    <td class="category">@toDoItem.Category</td>
                    <td style="text-align: left; padding-left: 5rem;">
                        <h5>@toDoItem.Name</h5>
                        <p>@toDoItem.Description</p>
                    </td>
                    <td>
                        <input class="form-check-input" type="checkbox" checked="@toDoItem.IsCompleted"
                            style="background-color: blueviolet;" @onchange="() => OnChangeIsDone(toDoItem)" />
                    </td>
                    <td>
                        <EditIcon Width=1rem; OnClick="() => EditItem(toDoItem)" Tooltip="Edit task" BackgroundColor="yellow" />
                        <DeleteIcon Width="1rem" Tooltip="Delete task" BackgroundColor="orange" DataBsToggle="modal"
                            DataBsTarget="#deleteModal" OnClick="() => SetSelectedToDoItem(toDoItem)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- deleteModal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <strong>@SelectedToDoItem?.Name</strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion"
                    data-bs-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
    .header {
        color: white;
        text-align: center;
        text-decoration: underline;
    }

    p {
        font-style: italic;
    }

    .category {
        font-weight: bolder;
    }

    .table-success {
        border: 2px solid #1e7e34 !important;
    }

    .table-warning {
        border: 2px solid #d88211 !important;
    }

    tr.table-success:hover,
    tr.table-warning:hover {
        opacity: 1;
        transform: scale(1.02);
</style>

@code
{
    private ToDoItemView? SelectedToDoItem { get; set; }
    private List<ToDoItemView>? toDoItems;
    public List<ToDoItemView> displaiedListOfItems = new();
    public void SortByDone() => ToggleSort("Done");
    public void SortByName() => ToggleSort("Name");
    public void SortByCategory() => ToggleSort("Category");
    public void SortByPriority() => ToggleSort("Priority");

    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
        InitializeSortingLists();
        displaiedListOfItems = toDoItems.OrderBy(item => item.Name).ToList();
    }
    private Dictionary<string, (List<ToDoItemView> Asc, List<ToDoItemView> Desc)> sortingLists;
    private string currentSort = "Name";
    private bool isAscending = true;

    private void InitializeSortingLists()
    {
        sortingLists = new Dictionary<string, (List<ToDoItemView>, List<ToDoItemView>)>
            {
                ["Done"] = (
            toDoItems.OrderBy(item => item.IsCompleted).ToList(),
            toDoItems.OrderByDescending(item => item.IsCompleted).ToList()
            ),
                ["Name"] = (
            toDoItems.OrderBy(item => item.Name).ToList(),
            toDoItems.OrderByDescending(item => item.Name).ToList()
            ),
                ["Category"] = (
            toDoItems.OrderBy(item => item.Category).ToList(),
            toDoItems.OrderByDescending(item => item.Category).ToList()
            ),
                ["Priority"] = (
            toDoItems.OrderBy(item => item.TaskPriority).ToList(),
            toDoItems.OrderByDescending(item => item.TaskPriority).ToList()
            )
            };
    }
    public void ToggleSort(string sortKey)
    {
        if (!sortingLists.ContainsKey(sortKey)) return;
        if (currentSort == sortKey)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSort = sortKey;
            isAscending = true;
        }

        displaiedListOfItems = isAscending
        ? sortingLists[sortKey].Asc
        : sortingLists[sortKey].Desc;
    }

    public void AddNewItem()
    {
        NavigationManager.NavigateTo("addNewItem/");
    }

    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }
    private void SetSelectedToDoItem(ToDoItemView toDoItem)
    {
        SelectedToDoItem = toDoItem;
    }

    private async Task ConfirmDeletion()
    {
        if (SelectedToDoItem != null)
        {
            await ToDoItemsClient.DeleteItemAsync(SelectedToDoItem);
            displaiedListOfItems.Remove(SelectedToDoItem);
            SelectedToDoItem = null;
        }
    }
    public async Task DeleteItem(ToDoItemView toDoItem)
    {
        await ToDoItemsClient.DeleteItemAsync(toDoItem);
    }

    public MarkupString PriorityBadges(Priority priority)
    {
        return priority switch
        {
            Priority.Low => (MarkupString)"<span class=\"badge rounded-pill bg-info\">Low</span>",
            Priority.Medium => (MarkupString)"<span class=\"badge rounded-pill bg-warning text-dark\">Medium</span>",
            Priority.High => (MarkupString)"<span class=\"badge rounded-pill bg-danger\">High</span>",
            Priority.Critical => (MarkupString)"<span class=\"badge rounded-pill bg-dark\">Critical</span>",
            _ => (MarkupString)""
        };
    }

    public async Task OnChangeIsDone(ToDoItemView toDoItem)
    {
        toDoItem.IsCompleted = !toDoItem.IsCompleted;
        await ToDoItemsClient.UpdateItemAsync(toDoItem);
        InitializeSortingLists();
        StateHasChanged();
    }
}
